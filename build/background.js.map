{"version":3,"file":"background.js","mappings":"mBAEA,IAAIA,EAAY,KACZC,EAAsB,KACtBC,EAAS,KACb,MAAMC,EAAO,IAAIC,YAAY,GACvBC,EAAO,IAAIC,SAASH,GAyD1BI,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAGC,KAChD,OAAQF,EAAQG,MACd,IAAK,MACHd,GAAWe,KAAKJ,EAAQK,SACxB,MACF,IAAK,MACHX,EAAKY,SAAS,EAAG,GACjBjB,GAAWe,KAAKZ,GAChB,MACF,IAAK,QACHE,EAAKY,SAAS,EAAG,GACjBjB,GAAWe,KAAKZ,GAChB,MACF,IAAK,MACHI,OAAOW,KAAKC,MAAM,CAACC,IAAKb,OAAOC,QAAQa,cAAcC,gBAAgB,GAAGC,QAAQ,KAAK,SAASL,GACxFA,EAAKM,SACPjB,OAAOW,KAAKO,OAAOP,EAAK,GAAGQ,GAAI,CAACN,IAAK,mBAAqBT,EAAQK,QAAQW,QAC1EzB,EAAS,KACPK,OAAOW,KAAKC,MAAM,CAACC,IAAKb,OAAOC,QAAQa,cAAcC,gBAAgB,GAAGC,QAAQ,KAAK,SAASL,GACxFA,EAAKM,QACPjB,OAAOW,KAAKU,YAAYV,EAAK,GAAGQ,GAAI,CAClCZ,KAAM,SACNE,QAASL,EAAQK,UAChB,SAASa,GAAW,GAE3B,GAAE,EAIR,IACF,IAAK,QACH3B,GAAUA,IACVA,EAAS,KAKb,OADAW,EAAa,CAAC,IACP,CAAI,IA5Fb,SAASiB,IACP9B,EAAY,IAAI+B,UAAU,0BAE1B/B,EAAUgC,OAAUC,IAClBC,QAAQC,IAAI,kBAqChB,WACE,MAAMC,EAAsBC,aAC1B,KACMrC,GACFK,EAAKY,SAAS,EAAG,KACjBjB,EAAUe,KAAKZ,IAEfmC,cAAcF,EAChB,GAEF,IAEJ,CAhDIG,GACItC,IACFqC,cAAcrC,GACdA,EAAsB,KACxB,EAGFD,EAAUwC,UAAaP,IACrBC,QAAQC,IAAI,+BAA+BF,EAAMQ,QACjDlC,OAAOW,KAAKC,MAAM,CAACC,IAAKb,OAAOC,QAAQa,cAAcC,gBAAgB,GAAGC,QAAQ,KAAK,SAASL,GAC5F,IAAK,IAAIwB,KAAOxB,EAAM,CACpBX,OAAOW,KAAKU,YAAYc,EAAIhB,GAAI,CAC9BZ,KAAM,OACNE,QAAS2B,KAAKC,MAAMX,EAAMQ,QACzB,SAASZ,GAAW,IACvB,KACF,CACF,GAAE,EAGJ7B,EAAU6C,QAAWZ,IACnBC,QAAQC,IAAI,+BACZnC,EAAY,KACPC,IACHA,EAAsBoC,YAAYP,EAAS,KAC7C,CAEJ,CA+DAA,E","sources":["webpack://AutoPoe/./src/background.js"],"sourcesContent":["'use strict';\n\nlet webSocket = null;\nlet reconnectIntervalId = null;\nlet resend = null;\nconst sign = new ArrayBuffer(1);\nconst view = new DataView(sign);\n\nfunction connect() {\n  webSocket = new WebSocket('ws://127.0.0.1:8765/ws');\n\n  webSocket.onopen = (event) => {\n    console.log('websocket open');\n    keepAlive();\n    if (reconnectIntervalId) {\n      clearInterval(reconnectIntervalId);\n      reconnectIntervalId = null;\n    }\n  };\n\n  webSocket.onmessage = (event) => {\n    console.log(`websocket received message: ${event.data}`);\n    chrome.tabs.query({url: chrome.runtime.getManifest().content_scripts[0].matches[0]}, function(tabs) {\n      for (let tab of tabs) {\n        chrome.tabs.sendMessage(tab.id, {\n          type: 'SEND',\n          payload: JSON.parse(event.data)\n        }, function(response) {});\n        break;\n      }\n    });\n  };\n\n  webSocket.onclose = (event) => {\n    console.log('websocket connection closed');\n    webSocket = null;\n    if (!reconnectIntervalId) {\n      reconnectIntervalId = setInterval(connect, 5000);\n    }\n  };\n}\n\nfunction disconnect() {\n  if (webSocket == null) {\n    return;\n  }\n  webSocket.close();\n}\n\nfunction keepAlive() {\n  const keepAliveIntervalId = setInterval(\n    () => {\n      if (webSocket) {\n        view.setUint8(0, 0xff);\n        webSocket.send(sign);\n      } else {\n        clearInterval(keepAliveIntervalId);\n      }\n    },\n    20 * 1000 \n  );\n}\n\nchrome.runtime.onMessage.addListener((request, _, sendResponse) => {\n  switch (request.type) {\n    case 'RES':\n      webSocket?.send(request.payload);\n      break;\n    case 'END':\n      view.setUint8(0, 0x00);\n      webSocket?.send(sign);\n      break;\n    case 'ERROR':\n      view.setUint8(0, 0x01);\n      webSocket?.send(sign);\n      break;\n    case 'URL':\n      chrome.tabs.query({url: chrome.runtime.getManifest().content_scripts[0].matches[0]}, function(tabs) {\n        if (tabs.length) {\n          chrome.tabs.update(tabs[0].id, {url: \"https://poe.com/\" + request.payload.model});\n          resend = () => {\n            chrome.tabs.query({url: chrome.runtime.getManifest().content_scripts[0].matches[0]}, function(tabs) {\n              if (tabs.length) {\n                chrome.tabs.sendMessage(tabs[0].id, {\n                  type: 'RESEND',\n                  payload: request.payload\n                }, function(response) {});\n              }\n            });\n          \n          }\n        }\n      });\n    case 'READY':\n      resend && resend();\n      resend = null;\n      break;\n  }\n\n  sendResponse({});\n  return true;\n})\n\nconnect()"],"names":["webSocket","reconnectIntervalId","resend","sign","ArrayBuffer","view","DataView","chrome","runtime","onMessage","addListener","request","_","sendResponse","type","send","payload","setUint8","tabs","query","url","getManifest","content_scripts","matches","length","update","id","model","sendMessage","response","connect","WebSocket","onopen","event","console","log","keepAliveIntervalId","setInterval","clearInterval","keepAlive","onmessage","data","tab","JSON","parse","onclose"],"sourceRoot":""}